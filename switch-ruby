#!/usr/bin/env ruby

require 'fileutils'
require 'yaml'


#  output helper
if ARGV.delete('--verbose') || ARGV.delete('-v')
  def verbose(msg); puts msg end
else
  def verbose(msg); end
end



SR_BASE_DIR = ENV['SWITCH_RUBY_BASE_DIR'] || "#{ENV['HOME']}/.switch-ruby"

unless File.exist?(SR_BASE_DIR) && File.directory?(SR_BASE_DIR)
  # TODO: a lot!
  puts "Directory #{SR_BASE_DIR} does not exist. Aborting."
  exit 1
end


class RubyVersion
  attr_reader :version_short, :version, :path
  attr_accessor :sort_index
  def initialize(bin_ruby_path)
    @bin_ruby = bin_ruby_path
    @path = File.expand_path('../..', bin_ruby_path)
    @version = `#{bin_ruby_path} --version`
    #@version = "#{@version_string} located at #{bin_ruby_path}"
    @version_short = `#{bin_ruby_path} -e "puts RUBY_VERSION"`.strip
    @sort_index = 0
    #@index = 0
  end
  def switch_to_active!
    cmd = %|ln -nfs #{@path}/bin #{SR_BASE_DIR}/bin|
    verbose cmd
    `#{cmd}`
    if File.exist?("#{@path}/.gemrc")
      cmd = %|cp #{@path}/.gemrc #{ENV['HOME']}/.gemrc|
      verbose cmd
      `#{cmd}`
    elsif File.exist?("#{SR_BASE_DIR}/.gemrc")
      cmd = %|cp #{SR_BASE_DIR}/.gemrc #{ENV['HOME']}/.gemrc|
      verbose cmd
      `#{cmd}`
    end
  end
  def sort_key  # TODO: implement <=>
    [@short_version, @sort_index, @version]
    'asdf'
  end
  def self.all
    @@all
  end
  def self.find_all
    # find all ruby binaries, but reject those, that are sym-linked
    paths = Dir["#{SR_BASE_DIR}/*/bin/ruby"].reject{|path| path == "#{SR_BASE_DIR}/bin/bin/ruby"}
    verbose paths
    #paths << ...  TODO: there may be more at different locations; read config files
    all = paths.uniq.map do |path|
      RubyVersion.new(path)
    end.sort_by do |ruby|
      ruby.sort_key
    end.reverse

    temp_ar = []
    all.each do |ruby|
      version_doubles = temp_ar.select{|obj| obj.version_short == ruby.version_short}
      ruby.sort_index = version_doubles.count
      #@@all[ruby.path] = ruby
      temp_ar << ruby
    end

    @@all = temp_ar.sort_by{|ruby| ruby.sort_key}
  end
end



verbose 'Fetching all available versions of Ruby...'

RubyVersion.find_all


verbose ''

switch_to = ARGV[-1]

if ARGV.include?('--help') || ARGV.include?('-h') ||
    ARGV.empty? || (switch_to =~ /\d/).nil? ||
    (target = RubyVersion.all[switch_to.to_i - 1]).nil?

  puts "Usage: #{$0} [OPTION]... [Ruby Version index]"
  puts
  puts "Available Ruby Versions:"
  #RubyVersion.all.values.sort_by{|ruby| ruby.sort_key}.each_with_index do |ruby, index|
  RubyVersion.all.each_with_index do |ruby, index|
    #ruby.index = index
    puts
    puts "#{"#{index + 1}.".ljust(3)} RUBY_VERSION      => #{ruby.version_short}"
    puts "    RUBY_DESCRIPTION  => #{ruby.version}"
    puts "    Location          => #{ruby.path}"
  end
  puts
  puts 'OPTIONS:'
  puts '-h, --help       Show this message'
  puts '-v, --verbose    Be more chatty'
  puts
  exit 1
end


target.switch_to_active!


puts "You are now using #{`ruby -v`}"

